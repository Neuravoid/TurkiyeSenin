generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  passwordHash   String
  firstName      String
  lastName       String
  role           String   @default("USER")
  city           String?
  district       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  registrations  Registration[]
  favoriteScholarships FavoriteScholarship[]
}

model Municipality {
  id        String  @id @default(cuid())
  name      String
  city      String
  district  String?
  createdAt DateTime @default(now())
  events    Event[]
  scholarships Scholarship[]
}

model Category {
  id        String  @id @default(cuid())
  name      String
  slug      String  @unique
  createdAt DateTime @default(now())
  events    Event[]
}

model Event {
  id                     String  @id @default(cuid())
  municipalityId         String
  municipality           Municipality @relation(fields: [municipalityId], references: [id])
  title                  String
  description            String
  categoryId             String
  category               Category @relation(fields: [categoryId], references: [id])
  startDatetime          DateTime
  endDatetime            DateTime
  venueName              String
  venueAddress           String?
  venueLatitude          Float?
  venueLongitude         Float?
  // Denormalized location for quick filtering
  city                   String?
  district               String?
  capacity               Int
  currentRegistrations   Int      @default(0)
  price                  Decimal  @default(0)
  isFree                 Boolean  @default(true)
  registrationRequired   Boolean  @default(true)
  status                 String   @default("active")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  registrations          Registration[]
  scholarships           Scholarship[]
}

model Registration {
  id               String   @id @default(cuid())
  eventId          String
  event            Event    @relation(fields: [eventId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  status           String   @default("registered")
  qrCode           String   @unique
  hasGeneratedQr   Boolean  @default(false)
  createdAt        DateTime @default(now())
}

model Scholarship {
  id                  String   @id @default(cuid())
  municipalityId      String
  municipality        Municipality @relation(fields: [municipalityId], references: [id])
  title               String
  description         String?
  eligibilityCriteria String?
  applicationStart    DateTime?
  applicationEnd      DateTime?
  quota               Int?
  link                String?
  educationLevel      String?
  status              String   @default("active")
  eventId             String?
  event               Event?   @relation(fields: [eventId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  favorites           FavoriteScholarship[]
}

model FavoriteScholarship {
  id             String   @id @default(cuid())
  userId         String
  scholarshipId  String
  reminderAt     DateTime?
  createdAt      DateTime @default(now())

  user           User        @relation(fields: [userId], references: [id])
  scholarship    Scholarship @relation(fields: [scholarshipId], references: [id])

  @@unique([userId, scholarshipId])
}
